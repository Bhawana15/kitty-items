{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { atomFamily, selectorFamily, useRecoilState } from \"recoil\";\nimport { fetchFlowBalance } from \"../flow/fetch-flow-balance.script\";\nimport { IDLE, PROCESSING } from \"../global/constants\";\nexport const valueAtom = atomFamily({\n  key: \"flow-balance::state\",\n  default: selectorFamily({\n    key: \"flow-balance::default\",\n    get: address => async () => fetchFlowBalance(address)\n  })\n});\nexport const statusAtom = atomFamily({\n  key: \"flow-balance::status\",\n  default: IDLE\n});\nexport function useFlowBalance(address) {\n  _s();\n\n  const [balance, setBalance] = useRecoilState(valueAtom(address));\n  const [status, setStatus] = useRecoilState(statusAtom(address));\n  return {\n    balance,\n    status,\n\n    async refresh() {\n      setStatus(PROCESSING);\n      await fetchFlowBalance(address).then(setBalance);\n      setStatus(IDLE);\n    }\n\n  };\n}\n\n_s(useFlowBalance, \"C3z2xH0hbAiQBrlY6C45W6P5AQI=\", false, function () {\n  return [useRecoilState, useRecoilState];\n});","map":{"version":3,"sources":["F:/kitty-items/web/src/hooks/use-flow-balance.hook.js"],"names":["atomFamily","selectorFamily","useRecoilState","fetchFlowBalance","IDLE","PROCESSING","valueAtom","key","default","get","address","statusAtom","useFlowBalance","balance","setBalance","status","setStatus","refresh","then"],"mappings":";;AAAA,SAAQA,UAAR,EAAoBC,cAApB,EAAoCC,cAApC,QAAyD,QAAzD;AACA,SAAQC,gBAAR,QAA+B,mCAA/B;AACA,SAAQC,IAAR,EAAcC,UAAd,QAA+B,qBAA/B;AAEA,OAAO,MAAMC,SAAS,GAAGN,UAAU,CAAC;AAClCO,EAAAA,GAAG,EAAE,qBAD6B;AAElCC,EAAAA,OAAO,EAAEP,cAAc,CAAC;AACtBM,IAAAA,GAAG,EAAE,uBADiB;AAEtBE,IAAAA,GAAG,EAAEC,OAAO,IAAI,YAAYP,gBAAgB,CAACO,OAAD;AAFtB,GAAD;AAFW,CAAD,CAA5B;AAQP,OAAO,MAAMC,UAAU,GAAGX,UAAU,CAAC;AACnCO,EAAAA,GAAG,EAAE,sBAD8B;AAEnCC,EAAAA,OAAO,EAAEJ;AAF0B,CAAD,CAA7B;AAKP,OAAO,SAASQ,cAAT,CAAwBF,OAAxB,EAAiC;AAAA;;AACtC,QAAM,CAACG,OAAD,EAAUC,UAAV,IAAwBZ,cAAc,CAACI,SAAS,CAACI,OAAD,CAAV,CAA5C;AACA,QAAM,CAACK,MAAD,EAASC,SAAT,IAAsBd,cAAc,CAACS,UAAU,CAACD,OAAD,CAAX,CAA1C;AAEA,SAAO;AACLG,IAAAA,OADK;AAELE,IAAAA,MAFK;;AAGL,UAAME,OAAN,GAAgB;AACdD,MAAAA,SAAS,CAACX,UAAD,CAAT;AACA,YAAMF,gBAAgB,CAACO,OAAD,CAAhB,CAA0BQ,IAA1B,CAA+BJ,UAA/B,CAAN;AACAE,MAAAA,SAAS,CAACZ,IAAD,CAAT;AACD;;AAPI,GAAP;AASD;;GAbeQ,c;UACgBV,c,EACFA,c","sourcesContent":["import {atomFamily, selectorFamily, useRecoilState} from \"recoil\"\r\nimport {fetchFlowBalance} from \"../flow/fetch-flow-balance.script\"\r\nimport {IDLE, PROCESSING} from \"../global/constants\"\r\n\r\nexport const valueAtom = atomFamily({\r\n  key: \"flow-balance::state\",\r\n  default: selectorFamily({\r\n    key: \"flow-balance::default\",\r\n    get: address => async () => fetchFlowBalance(address),\r\n  }),\r\n})\r\n\r\nexport const statusAtom = atomFamily({\r\n  key: \"flow-balance::status\",\r\n  default: IDLE,\r\n})\r\n\r\nexport function useFlowBalance(address) {\r\n  const [balance, setBalance] = useRecoilState(valueAtom(address))\r\n  const [status, setStatus] = useRecoilState(statusAtom(address))\r\n\r\n  return {\r\n    balance,\r\n    status,\r\n    async refresh() {\r\n      setStatus(PROCESSING)\r\n      await fetchFlowBalance(address).then(setBalance)\r\n      setStatus(IDLE)\r\n    },\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}