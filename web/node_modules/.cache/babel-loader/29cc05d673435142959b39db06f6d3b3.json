{"ast":null,"code":"import { send, decode, script, args, arg, cdc } from \"@onflow/fcl\";\nimport { Address } from \"@onflow/types\";\nconst CODE = cdc`\n  import FungibleToken from 0xFungibleToken\n  import Kibble from 0xKibble\n\n  pub fun main(address: Address): UFix64? {\n    if let vault = getAccount(address).getCapability<&{FungibleToken.Balance}>(Kibble.BalancePublicPath).borrow() {\n      return vault.balance\n    }\n    return nil\n  }\n\n`;\nexport function fetchKibblesBalance(address) {\n  if (address == null) return Promise.resolve(false); // prettier-ignore\n\n  return send([script(CODE), args([arg(address, Address)])]).then(decode);\n}","map":{"version":3,"sources":["F:/kitty-items/web/src/flow/fetch-kibbles-balance.script.js"],"names":["send","decode","script","args","arg","cdc","Address","CODE","fetchKibblesBalance","address","Promise","resolve","then"],"mappings":"AAAA,SAAQA,IAAR,EAAcC,MAAd,EAAsBC,MAAtB,EAA8BC,IAA9B,EAAoCC,GAApC,EAAyCC,GAAzC,QAAmD,aAAnD;AACA,SAAQC,OAAR,QAAsB,eAAtB;AAEA,MAAMC,IAAI,GAAGF,GAAI;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAXA;AAaA,OAAO,SAASG,mBAAT,CAA6BC,OAA7B,EAAsC;AAC3C,MAAIA,OAAO,IAAI,IAAf,EAAqB,OAAOC,OAAO,CAACC,OAAR,CAAgB,KAAhB,CAAP,CADsB,CAG3C;;AACA,SAAOX,IAAI,CAAC,CACVE,MAAM,CAACK,IAAD,CADI,EAEVJ,IAAI,CAAC,CACHC,GAAG,CAACK,OAAD,EAAUH,OAAV,CADA,CAAD,CAFM,CAAD,CAAJ,CAKJM,IALI,CAKCX,MALD,CAAP;AAMD","sourcesContent":["import {send, decode, script, args, arg, cdc} from \"@onflow/fcl\"\r\nimport {Address} from \"@onflow/types\"\r\n\r\nconst CODE = cdc`\r\n  import FungibleToken from 0xFungibleToken\r\n  import Kibble from 0xKibble\r\n\r\n  pub fun main(address: Address): UFix64? {\r\n    if let vault = getAccount(address).getCapability<&{FungibleToken.Balance}>(Kibble.BalancePublicPath).borrow() {\r\n      return vault.balance\r\n    }\r\n    return nil\r\n  }\r\n\r\n`\r\n\r\nexport function fetchKibblesBalance(address) {\r\n  if (address == null) return Promise.resolve(false)\r\n\r\n  // prettier-ignore\r\n  return send([\r\n    script(CODE),\r\n    args([\r\n      arg(address, Address)\r\n    ])\r\n  ]).then(decode)\r\n}\r\n"]},"metadata":{},"sourceType":"module"}