{"ast":null,"code":"import { send, decode, script, args, arg, cdc } from \"@onflow/fcl\";\nimport { Address } from \"@onflow/types\";\nconst CODE = cdc`\n  import FungibleToken from 0xFungibleToken\n  import NonFungibleToken from 0xNonFungibleToken\n  import Kibble from 0xKibble\n  import KittyItems from 0xKittyItems\n  import KittyItemsMarket from 0xKittyItemsMarket\n\n  pub fun hasKibble(_ address: Address): Bool {\n    let receiver: Bool = getAccount(address)\n      .getCapability<&Kibble.Vault{FungibleToken.Receiver}>(Kibble.ReceiverPublicPath)\n      .check()\n\n    let balance: Bool = getAccount(address)\n      .getCapability<&Kibble.Vault{FungibleToken.Balance}>(Kibble.BalancePublicPath)\n      .check()\n\n    return receiver && balance\n  }\n\n  pub fun hasKittyItems(_ address: Address): Bool {\n    return getAccount(address)\n      .getCapability<&KittyItems.Collection{NonFungibleToken.CollectionPublic, KittyItems.KittyItemsCollectionPublic}>(KittyItems.CollectionPublicPath)\n      .check()\n  }\n\n  pub fun hasKittyItemsMarket(_ address: Address): Bool {\n    return getAccount(address)\n      .getCapability<&KittyItemsMarket.Collection{KittyItemsMarket.CollectionPublic}>(KittyItemsMarket.CollectionPublicPath)\n      .check()\n  }\n\n  pub fun main(address: Address): {String: Bool} {\n    let ret: {String: Bool} = {}\n    ret[\"Kibble\"] = hasKibble(address)\n    ret[\"KittyItems\"] = hasKittyItems(address)\n    ret[\"KittyItemsMarket\"] = hasKittyItemsMarket(address)\n    return ret\n  }\n`;\nexport function isAccountInitialized(address) {\n  if (address == null) return Promise.resolve(false); // prettier-ignore\n\n  return send([script(CODE), args([arg(address, Address)])]).then(decode);\n}","map":{"version":3,"sources":["F:/kitty-items/web/src/flow/is-account-initialized.script.js"],"names":["send","decode","script","args","arg","cdc","Address","CODE","isAccountInitialized","address","Promise","resolve","then"],"mappings":"AAAA,SAAQA,IAAR,EAAcC,MAAd,EAAsBC,MAAtB,EAA8BC,IAA9B,EAAoCC,GAApC,EAAyCC,GAAzC,QAAmD,aAAnD;AACA,SAAQC,OAAR,QAAsB,eAAtB;AAEA,MAAMC,IAAI,GAAGF,GAAI;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAtCA;AAwCA,OAAO,SAASG,oBAAT,CAA8BC,OAA9B,EAAuC;AAC5C,MAAIA,OAAO,IAAI,IAAf,EAAqB,OAAOC,OAAO,CAACC,OAAR,CAAgB,KAAhB,CAAP,CADuB,CAG5C;;AACA,SAAOX,IAAI,CAAC,CACVE,MAAM,CAACK,IAAD,CADI,EAEVJ,IAAI,CAAC,CACHC,GAAG,CAACK,OAAD,EAAUH,OAAV,CADA,CAAD,CAFM,CAAD,CAAJ,CAKJM,IALI,CAKCX,MALD,CAAP;AAMD","sourcesContent":["import {send, decode, script, args, arg, cdc} from \"@onflow/fcl\"\r\nimport {Address} from \"@onflow/types\"\r\n\r\nconst CODE = cdc`\r\n  import FungibleToken from 0xFungibleToken\r\n  import NonFungibleToken from 0xNonFungibleToken\r\n  import Kibble from 0xKibble\r\n  import KittyItems from 0xKittyItems\r\n  import KittyItemsMarket from 0xKittyItemsMarket\r\n\r\n  pub fun hasKibble(_ address: Address): Bool {\r\n    let receiver: Bool = getAccount(address)\r\n      .getCapability<&Kibble.Vault{FungibleToken.Receiver}>(Kibble.ReceiverPublicPath)\r\n      .check()\r\n\r\n    let balance: Bool = getAccount(address)\r\n      .getCapability<&Kibble.Vault{FungibleToken.Balance}>(Kibble.BalancePublicPath)\r\n      .check()\r\n\r\n    return receiver && balance\r\n  }\r\n\r\n  pub fun hasKittyItems(_ address: Address): Bool {\r\n    return getAccount(address)\r\n      .getCapability<&KittyItems.Collection{NonFungibleToken.CollectionPublic, KittyItems.KittyItemsCollectionPublic}>(KittyItems.CollectionPublicPath)\r\n      .check()\r\n  }\r\n\r\n  pub fun hasKittyItemsMarket(_ address: Address): Bool {\r\n    return getAccount(address)\r\n      .getCapability<&KittyItemsMarket.Collection{KittyItemsMarket.CollectionPublic}>(KittyItemsMarket.CollectionPublicPath)\r\n      .check()\r\n  }\r\n\r\n  pub fun main(address: Address): {String: Bool} {\r\n    let ret: {String: Bool} = {}\r\n    ret[\"Kibble\"] = hasKibble(address)\r\n    ret[\"KittyItems\"] = hasKittyItems(address)\r\n    ret[\"KittyItemsMarket\"] = hasKittyItemsMarket(address)\r\n    return ret\r\n  }\r\n`\r\n\r\nexport function isAccountInitialized(address) {\r\n  if (address == null) return Promise.resolve(false)\r\n\r\n  // prettier-ignore\r\n  return send([\r\n    script(CODE),\r\n    args([\r\n      arg(address, Address)\r\n    ])\r\n  ]).then(decode)\r\n}\r\n"]},"metadata":{},"sourceType":"module"}