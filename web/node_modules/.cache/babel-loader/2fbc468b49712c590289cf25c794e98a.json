{"ast":null,"code":"import * as fcl from \"@onflow/fcl\";\nimport * as t from \"@onflow/types\";\nexport async function fetchMarketItem(address, id) {\n  return fcl.send([fcl.script`\n      import KittyItemsMarket from 0xKittyItemsMarket\n\n      pub struct SaleItem {\n        pub let itemID: UInt64\n        pub let typeID: UInt64\n        pub let owner: Address\n        pub let price: UFix64\n        \n\n        init(itemID: UInt64, typeID: UInt64, owner: Address, price: UFix64, ) {\n          self.itemID = itemID\n          self.typeID = typeID\n          self.owner = owner\n          self.price = price\n        }\n      }\n\n      pub fun main(address: Address, id: UInt64): SaleItem? {\n        if let collection = getAccount(address).getCapability<&KittyItemsMarket.Collection{KittyItemsMarket.CollectionPublic}>(KittyItemsMarket.CollectionPublicPath).borrow() {\n          if let item = collection.borrowSaleItem(itemID: id) {\n            return SaleItem(itemID: id, typeID: item.typeID, owner: address, price: item.price)\n          }\n        }\n        return nil\n      }\n    `, fcl.args([fcl.arg(address, t.Address), fcl.arg(Number(id), t.UInt64)])]).then(fcl.decode);\n}","map":{"version":3,"sources":["F:/kitty-items/web/src/flow/fetch-market-item.script.js"],"names":["fcl","t","fetchMarketItem","address","id","send","script","args","arg","Address","Number","UInt64","then","decode"],"mappings":"AAAA,OAAO,KAAKA,GAAZ,MAAqB,aAArB;AACA,OAAO,KAAKC,CAAZ,MAAmB,eAAnB;AAEA,OAAO,eAAeC,eAAf,CAA+BC,OAA/B,EAAwCC,EAAxC,EAA4C;AACjD,SAAOJ,GAAG,CACPK,IADI,CACC,CACJL,GAAG,CAACM,MAAO;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KA3BU,EA4BJN,GAAG,CAACO,IAAJ,CAAS,CAACP,GAAG,CAACQ,GAAJ,CAAQL,OAAR,EAAiBF,CAAC,CAACQ,OAAnB,CAAD,EAA8BT,GAAG,CAACQ,GAAJ,CAAQE,MAAM,CAACN,EAAD,CAAd,EAAoBH,CAAC,CAACU,MAAtB,CAA9B,CAAT,CA5BI,CADD,EA+BJC,IA/BI,CA+BCZ,GAAG,CAACa,MA/BL,CAAP;AAgCD","sourcesContent":["import * as fcl from \"@onflow/fcl\"\r\nimport * as t from \"@onflow/types\"\r\n\r\nexport async function fetchMarketItem(address, id) {\r\n  return fcl\r\n    .send([\r\n      fcl.script`\r\n      import KittyItemsMarket from 0xKittyItemsMarket\r\n\r\n      pub struct SaleItem {\r\n        pub let itemID: UInt64\r\n        pub let typeID: UInt64\r\n        pub let owner: Address\r\n        pub let price: UFix64\r\n        \r\n\r\n        init(itemID: UInt64, typeID: UInt64, owner: Address, price: UFix64, ) {\r\n          self.itemID = itemID\r\n          self.typeID = typeID\r\n          self.owner = owner\r\n          self.price = price\r\n        }\r\n      }\r\n\r\n      pub fun main(address: Address, id: UInt64): SaleItem? {\r\n        if let collection = getAccount(address).getCapability<&KittyItemsMarket.Collection{KittyItemsMarket.CollectionPublic}>(KittyItemsMarket.CollectionPublicPath).borrow() {\r\n          if let item = collection.borrowSaleItem(itemID: id) {\r\n            return SaleItem(itemID: id, typeID: item.typeID, owner: address, price: item.price)\r\n          }\r\n        }\r\n        return nil\r\n      }\r\n    `,\r\n      fcl.args([fcl.arg(address, t.Address), fcl.arg(Number(id), t.UInt64)]),\r\n    ])\r\n    .then(fcl.decode)\r\n}\r\n"]},"metadata":{},"sourceType":"module"}